---
title: Migrating from cf-release to cf-deployment
owner: Release Integration
---

<strong><%= modified_date %></strong>

This topic describes how to migrate your Cloud Foundry deployment
from `cf-release` to `cf-deployment`.
The procedures in this topic are specific to Amazon Web Services (AWS).
While transitions on other IaaSes are possible,
they are not currently supported.

## <a id='prerequisites'></a> Prerequisites
The procedures in this topic have prerequisites.
To ensure you're ready to perform this procedure,
please first perform the following steps:

* Install the BOSH CLI v2.
For more information, see the <a href="https://bosh.io/docs/cli-v2.html#install">BOSH documentation</a>.
* Review the migration prerequisites in the [cf-deployment-transition](https://github.com/cloudfoundry/cf-deployment-transition/blob/master/README.md#migration-prerequisites) GitHub repo,
with particular attention to the following:
  - You must enable all TLS features.
  - You must be using external databases.
  - You must be using an external blobstore.
  - You must either create new databases or disable some optional features in `cf-deployment`.

## <a id='configure-cli'></a> Step 1: Configure the BOSH CLI v2

Perform the following steps:

1. Set your BOSH Director address, username, password as environment variables:
  <pre class="terminal">
  $ export BOSH\_ENVIRONMENT=YOUR-DIRECTOR-ADDRESS
  $ export BOSH\_CLIENT=YOUR-DIRECTOR-USERNAME
  $ export BOSH\_CLIENT\_SECRET=YOUR-DIRECTOR-PASSWORD
  </pre>

1. Confirm that your BOSH CLI is logged in and working:
  <pre class="terminal">
  $ bosh deployments
  Using environment 'bosh.example.com' as client 'admin'
  <br>
  Name      Release(s)            Stemcell(s)                                      Team(s)  Cloud Config
  cf        cf/268                bosh-aws-xen-hvm-ubuntu-trusty-go\_agent/3421.11  -        none
  cf-diego  garden-runc/1.9.0     bosh-aws-xen-hvm-ubuntu-trusty-go\_agent/3421.11  -        none
              grootfs/0.21.0
              cf-networking/1.2.0
              cflinuxfs2/1.138.0
              diego/1.23.0
              cf/268
  </pre>

1. Set your Cloud Foundry deployment name as an environment variable:
  <pre class="terminal">
  $ export BOSH\_DEPLOYMENT=YOUR-CF-DEPLOYMENT-NAME
  </pre>

1. If your BOSH Director is configured with a self-signed certificate,
perform the following steps to provide that certificate to the BOSH CLI.
  1. Extract the necessary certificate
  from your BOSH Director deployment manifest:
  <pre class="terminal">
  $ bosh interpolate --path=/properties/director/ssl/cert PATH-TO-YOUR-BOSH-DIRECTOR-MANIFEST > /tmp/bosh-CA.crt
  </pre>
  1. Configure the BOSH CLI to use the extracted certificate:
  <pre class="terminal">
  $ export BOSH\_CA\_CERT=/tmp/bosh-CA.crt
  </pre>

## <a id='var-store-file'></a> Step 2: Build Variables Store File
You must build a variables store file from your Cloud Foundry and Diego manifests.

This file contains information that provides environment-specific or sensitive configuration
that the BOSH CLI reads and writes to. The operator uses this file when deploying Cloud Foundry
with `cf-deployment`.

Perform the following steps to build your variables store file:

1. Download your Cloud Foundry and Diego manifests from your existing `cf-release`-based deployments:
  <pre class="terminal">
  $ bosh download-manifest > /tmp/cf-manifest.yml
  $ bosh download-manifest -d YOUR-DIEGO-DEPLOYMENT-NAME > /tmp/diego-manifest.yml
  </pre>
1. Visit the [cf-deployment-transition](https://github.com/cloudfoundry/cf-deployment-transition/blob/master/README.md) GitHub repo
   and use the `extract-vars-store-from-manifests.sh` script
   to generate `deployment-vars.yml`.

## <a id='scale'></a> Step 3: Write Scaling Ops File

To perform a successful migration, you must ensure that your `cf-deployment` manifest
deploys components at a scale equivalent to your existing Cloud Foundry and Diego deployments.

### <a id='understand-name-changes'></a> Understand Name Changes
`cf-deployment` renames or combines some jobs in `cf-release`-based manifests.

`cf-release` had a copy of each job for each Availability Zone (AZ),
because historically,
BOSH was unaware of AZs.

`cf-deployment` no longer needs this workaround
thanks to first-class support of AZs in BOSH.
This means that several instance groups have been combined,
which has implications for scaling.

For instance, the `diego-cell` instance group replaces
both the `cell_z1` and the `cell_z2` instance groups
in your existing Diego deployment.
If you currently have 6 instances each of `cell_z1` and `cell_z2`,
you will need 12 instances of `diego-cell`.

For a list of all job name changes from `cf-release`,
see the `cfr-to-cfd.yml` ops file
in the [cf-deployment-transition](https://github.com/cloudfoundry/cf-deployment-transition/blob/master/cfr-to-cfd.yml) GitHub repo.
This file does not list name changes from the Diego deployment.
However, only the `diego-cells` should be necessary to scale.

### <a id='write-ops-file'></a> Write Ops File

To scale the components in `cf-deployment`, write an ops file.
An ops file is a YAML file that specifies operations to perform on the deployment manifest,
which you provide to the BOSH CLI when deploying Cloud Foundry in the following section.

The following example ops file scales to 12 instances of the `diego-cell`:

```yaml
---
- type: replace
  path: /instance_groups/name=diego-cell/instances
  value: 12
```

## <a id='deploy-cf'></a> Step 4: Deploy Cloud Foundry
Perform the steps in the [Deploying Cloud Foundry](./cf-deployment/deploy-cf.html) topic. Keep in mind the following when deploying Cloud Foundry in [Step 5: Deploy](./cf-deployment/deploy-cf.html#deploy):

* You must apply the ops file for scaling your components that you created in the previous step.
* You must apply the `cfr-to-cfd.yml` ops file.
  Download this ops file from the [cf-deployment-transition](https://github.com/cloudfoundry/cf-deployment-transition/blob/master/cfr-to-cfd.yml) GitHub repo.
  If you are disabling `cf-deployment` features to simplify the transition,
  you must also apply the appropriate ops files from the transition repo.
* The `deployment-vars.yml` file you pass with the `--vars-store` flag must be the variables store file you created above.

## <a id='delete-diego'></a> Step 5: Delete Old Diego Deployment

Delete your Diego deployment by running the following command:

<pre class="terminal">
$ bosh -d YOUR-DIEGO-DEPLOYMENT-NAME delete-deployment
</pre>

This command may take several minutes, because each Diego cell must drain its contents to the new `cf-deployment` cells.

## <a id='cleanup'></a> (Optional) Step 6: Clean Up

To delete any unused releases and stemcells from your BOSH Director,
including `cf-release`, run the following command:

<pre class="terminal">
$ bosh clean-up --all
</pre>
