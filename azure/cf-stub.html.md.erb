---
title: Customizing the Cloud Foundry Deployment Manifest for Azure
---

<style>
   .note.warning {
       background-color: #fdd;
       border-color: #fbb
   }

   .note.warning:before {
       color: #f99;
    }
</style>

<strong><%= modified_date %></strong>

<p class="note"><strong>NOTE</strong>: Cloud Foundry on Microsoft Azure is supported by the community and Microsoft, but the Cloud Foundry Foundation does not currently test it.</p>

This topic describes how to customize the Cloud Foundry deployment manifest for Azure.

To create a Cloud Foundry manifest, you must perform the following steps:

1. Prepare workspace environment, download cf-release and install [spiff](https://github.com/cloudfoundry-incubator/spiff).
1.  Use the BOSH CLI to [retrieve your BOSH Director UUID](#bosh-uuid), which you use to customize your manifest stub.
1. Create a manifest stub in YAML format.
1. Use [spiff](https://github.com/cloudfoundry-incubator/spiff) to merge the manifest stub with azure IaaS configuration and other configuration files in the `cf-release` repository to generate your deployment manifest.

##<a id='preparation'></a> Step 1: Preparation

1. Prepare a work environment

    <pre class="terminal">
    $ mkdir workspace
    $ cd workspace
    $ export WORK_DIR=$(pwd)
    </pre>

1. Clone the `cf-release` GitHub repository. Use `git clone` to clone the latest Cloud Foundry configuration files onto your machine.

    <pre class="terminal">
    $ git clone https://github.com/cloudfoundry/cf-release.git
    </pre>

1. From the `cf-release` directory, run the update script to fetch all the submodules.

    <pre class="terminal">
    $ ${WORK_DIR}/cf-release/scripts/update
    </pre>

1. Install [spiff](https://github.com/cloudfoundry-incubator/spiff), a command line tool for generating deployment manifests.

##<a id='bosh-uuid'></a> Step 2: Retrieve Your BOSH Director UUID

<%= partial '../common/bosh_uuid' %>

##<a id='stub'></a> Step 3: Create Your Manifest Stub

###<a id="example-stub"></a> Get Cloud Foundry Deployment Manifest Stub for Azure
Get the [example manifest stub](https://raw.githubusercontent.com/cloudfoundry-incubator/bosh-azure-cpi-release/master/docs/stubs/cf/cf-stub.yml) for Azure, and then follow this editing instructions to customize it for your deployment.

###<a id="editing"></a>Editing Instructions
<table border="1" class="nice">
  <tr>
    <th style="width:35%">Deployment Manifest Stub Contents</th>
    <th>Editing Instructions</th>
  </tr>
  <tr>
    <td><pre><code>
director_uuid: DIRECTOR_UUID
    </code></pre></td>
    <td>Replace <code>DIRECTOR_UUID</code> with the BOSH Director UUID. Run the       BOSH CLI command <code>bosh status --uuid</code> to view the BOSH 
      Director UUID.
    </td>
  </tr>
  <tr>
    <td><pre><code>
meta:
  environment: ENVIRONMENT
    </code></pre></td>
    <td>Replace <code>ENVIRONMENT</code> with an arbitrary name describing your environment, for example <code>azure-prod</code>.
    </td>
  </tr>
  <tr>
    <td><pre><code>
  reserved_static_ips:
  - CLOUD_FOUNDRY_PUBLIC_IP
    </code></pre></td>
    <td>Replace <code>CLOUD_FOUNDRY_PUBLIC_IP</code> with an existing public IP address for your Azure network. This is assigned to the <code>ha_proxy</code> job to receive incoming traffic.
    </td>
  </tr>
  <tr>
    <td><pre><code>
networks:
  - name: reserved
    type: vip

  - name: cf1
    type: manual
    subnets:
    - range: 10.0.16.0/24
      gateway: 10.0.16.1
      dns:
      - 168.63.129.16
      reserved:
      - 10.0.16.2 - 10.0.16.3
      static:
      - 10.0.16.4 - 10.0.16.100
      cloud_properties:
        virtual_network_name: VNET_NAME
        subnet_name: SUBNET_NAME_FOR_CLOUD_FOUNDRY
        security_group: NSG_NAME_FOR_CLOUD_FOUNDRY
    </code></pre></td>
    <td>Update the values for <code>range</code>, <code>gateway</code>,  <code>reserved</code>, and <code>static</code> to reflect the available networks and IP addresses in your Azure network. Replace <code>VNET_NAME</code> with the virtual network name, <code>SUBNET_NAME_FOR_CLOUD_FOUNDRY</code> with the subnet name, and <code>NSG_NAME_FOR_CLOUD_FOUNDRY</code> with the security group name of your Azure network.
    </td>
  </tr>
  <tr>
    <td><pre><code>
properties:
  system_domain: SYSTEM_DOMAIN
  system_domain_organization: SYSTEM_DOMAIN_ORGANIZATION
    </code></pre></td>
    <td>Replace <code>SYSTEM_DOMAIN</code> with the full domain you want associated with applications pushed to your Cloud Foundry installation. You must have already acquired these domains and configured their DNS records so that these domains resolve to your load balancer. For testing, you can use <code>CLOUD_FOUNDRY_PUBLIC_IP.xip.io</code> if you do not have a domain available. <code>xip.io</code> is not stable, and can sometimes fail to resolve to related IP addresses.
    <br/><br/>
    Replace <code>SYSTEM_DOMAIN_ORGANIZATION</code> with your organization name. This organization will be created and configured to own the <code>SYSTEM_DOMAIN</code>.
    </td>
  </tr>
  <tr>
    <td><pre><code>
  ssl:
    skip_cert_verify: true
    </code></pre></td>
    <td> Set <code>skip_cert_verify</code> to <code>true</code> to skip SSL certificate verification if you do not use a real domain and certificate. If you want to use SSL certificates to secure traffic into your deployment, see the <a href="../adminguide/securing-traffic.html">Securing Traffic into Cloud Foundry</a> topic.
  </td>
  <tr>
    <td><pre><code>
  cc:
    staging_upload_user: STAGING_UPLOAD_USER
    staging_upload_password: STAGING_UPLOAD_PASSWORD
    bulk_api_password: BULK_API_PASSWORD
    db_encryption_key: DB_ENCRYPTION_KEY
    </code></pre></td>
    <td>
    The Cloud Controller API endpoint requires basic authentication. Replace <code>STAGING_UPLOAD_USER</code> and <code>STAGING_UPLOAD_PASSWORD</code> with a username and password of your choosing.
    <br /><br />
    Replace <code>BULK_API_PASSWORD</code> with a password of your choosing. Health Manager uses this password to access the Cloud Controller bulk API.
    <br /><br />
    Replace <code>DB_ENCRYPTION_KEY</code> with a secure key that you generate to encrypt sensitive values in the Cloud Controller database.
    You can use any random string. For example, run the following command from a command line to generate a 32-character random string: <code>LC_ALL=C tr -dc 'A-Za-z0-9' < /dev/urandom | head -c 32 ; echo</code>
    </td>
  </tr>
  <tr>
    <td><pre><code>
  blobstore:
    admin_users:
      - username: BLOBSTORE_USERNAME
        password: BLOBSTORE_PASSWORD
    secure_link:
        secret: BLOBSTORE_SECRET
    tls:
        port: 443
        cert: BLOBSTORE_TLS_CERT
        private_key: BLOBSTORE_PRIVATE_KEY
        ca_cert: BLOBSTORE_CA_CERT
    </code></pre></td>
    <td>Replace <code>BLOBSTORE_USERNAME</code> and <code>BLOBSTORE_PASSWORD</code> with a username and password of your choosing.
    <br /><br />
    Replace <code>BLOBSTORE_SECRET</code> with a secure secret of your choosing.
    <br /><br />
    Replace <code>BLOBSTORE_TLS_CERT</code>, <code>BLOBSTORE_PRIVATE_KEY</code>, and <code>BLOBSTORE_CA_CERT</code> with the blobstore TLS certificate, private key, and CA certificate. You can use the <code>scripts/generate-blobstore-certs</code> script in the <code>cf-release</code> repository to generate self-signed certificates.
    </td>
  </tr>
  <tr>
    <td><pre><code>
  consul:
    encrypt_keys:
      - CONSUL_ENCRYPT_KEY
    ca_cert: CONSUL_CA_CERT
    server_cert: CONSUL_SERVER_CERT
    server_key: CONSUL_SERVER_KEY
    agent_cert: CONSUL_AGENT_CERT
    agent_key: CONSUL_AGENT_KEY
    </code></pre></td>
    <td>See the <a href="../common/consul-security.html">Security Configuration for Consul</a> topic. You can use the <code>scripts/generate-consul-certs</code> script in the <code>cf-release</code> repository to generate self-signed certificates.
    </td>
  </tr>
  <tr>
    <td><pre><code>
  etcd:
    require_ssl: true
    ca_cert: ETCD_CA_CERT
    client_cert: ETCD_CLIENT_CERT
    client_key: ETCD_CLIENT_KEY
    peer_ca_cert: ETCD_PEER_CA_CERT
    peer_cert: ETCD_PEER_CERT
    peer_key: ETCD_PEER_KEY
    server_cert: ETCD_SERVER_CERT
    server_key: ETCD_SERVER_KEY
    </code></pre></td>
    <td>
      Generate SSL certs for etcd and replace these values. 
      You can use the <code>scripts/generate-etcd-certs</code> script 
      in the <code>cf-release</code> repository to generate self signed certs.
    </td>
  </tr>
  <tr>
    <td><pre><code>
  loggregator:
    tls:
      ca_cert: LOGGREGATOR_CA_CERT
      doppler:
        cert: DOPPLER_CERT
        key: DOPPLER_KEY
      metron:
        cert: METRON_CERT
        key: METRON_KEY
      trafficcontroller:
        cert: TRAFFICCONTROLLER_CERT
        key: TRAFFICCONTROLLER_KEY
    </code></pre></td>
    <td>
       Generate SSL certs for loggregator and replace these values. You can use the <code>scripts/generate-loggregator-certs</code> script in the <code>cf-release</code> repository to generate self signed certs.
    </td>
  </tr>
  <tr>
    <td><pre><code>
  loggregator_endpoint:
    shared_secret: LOGGREGATOR_ENDPOINT_SHARED_SECRET
    </code></pre></td>
    <td>Replace <code>LOGGREGATOR_ENDPOINT_SHARED_SECRET</code> with a secure string that you generate.
    </td>
  </tr>
  <tr>
    <td><pre><code>
  nats:
    user: NATS_USER
    password: NATS_PASSWORD
    </code></pre></td>
    <td>Replace <code>NATS_USER</code> and <code>NATS_PASSWORD</code> with a username and secure password of your choosing. Cloud Foundry components use these credentials to communicate with each other over the NATS message bus.
      </td>
  </tr>
  <tr>
    <td><pre><code>
  router:
    status:
      user: ROUTER_USER
      password: ROUTER_PASSWORD
    </code></pre></td>
    <td>
      Replace <code>ROUTER_USER</code> and <code>ROUTER_PASSWORD</code> with a username and secure password of your choosing.
      </td>
  </tr>
  <tr>
    <td><pre><code>
  uaa:
    admin:
      client_secret: ADMIN_SECRET
    cc:
      client_secret: CC_CLIENT_SECRET
    clients:
      cc_routing:
        secret: CC_ROUTING_SECRET
      cloud_controller_username_lookup:
        secret: CLOUD_CONTROLLER_USERNAME_LOOKUP_SECRET
      doppler:
        secret: DOPPLER_SECRET
      gorouter:
        secret: GOROUTER_SECRET
      tcp_emitter:
        secret: TCP-EMITTER-SECRET
      tcp_router:
        secret: TCP-ROUTER-SECRET
      login:
        secret: LOGIN_CLIENT_SECRET
      notifications:
        secret: NOTIFICATIONS_CLIENT_SECRET
      cc-service-dashboards:
        secret: CC_SERVICE_DASHBOARDS_SECRET
    </code></pre></td>
    <td>Replace the values for all <code>secret</code> keys with secure secrets that you generate.
    </td>
  </tr>
  <tr>
    <td><pre><code>
    jwt:
      verification_key: JWT_VERIFICATION_KEY
      signing_key: JWT_SIGNING_KEY
    </code></pre></td>
    <td>Generate a PEM-encoded RSA key pair, and replace <code>JWT_SIGNING_KEY</code> with the private key, and <code>JWT_VERIFICATION_KEY</code> with the corresponding public key. You can generate a key pair with the following command: <code>openssl genrsa -out jwt_signing_key 2048 && openssl rsa -pubout -in jwt_signing_key -out jwt_verification_key</code>
    Copy and paste the full keys with correct indentation, including the <code>BEGIN</code> and <code>END</code> delimiter lines.
    </td>
  </tr>
  <tr>
    <td><pre><code>
    scim:
      users:
      - name: admin
        password: ADMIN_PASSWORD
        groups:
        - scim.write
        - scim.read
        - openid
        - cloud_controller.admin
        - doppler.firehose
    </code></pre></td>
    <td>Generate a secure password and replace <code>ADMIN_PASSWORD</code> with that value to set the password for the Admin user of your Cloud Foundry installation.
    </td>
  </tr>
  <tr>
    <td><pre><code>
    sslCertificate: UAA_SERVER_CERT
    sslPrivateKey: UAA_SERVER_KEY
    </code></pre></td>
    <td>Replace <code>UAA_SERVER_CERT</code> and <code>UAA_SERVER_KEY</code> with UAA certificates. You can use the <code>scripts/generate-uaa-certs</code> script in the <code>cf-release</code> repository to generate self-signed certificates.</td>
    </td>
  </tr>
  <tr>
    <td><pre><code>
  ccdb:
    roles:
    - name: ccadmin
      password: CCDB_PASSWORD
  uaadb:
    roles:
      - name: uaaadmin
        password: UAADB_PASSWORD
  databases:
    roles:
    - name: ccadmin
      password: CCDB_PASSWORD
    - name: uaaadmin
      password: UAADB_PASSWORD
    - name: diego
      password: DIEGODB_PASSWORD
    </code></pre></td>
    <td>Replace <code>CCDB_PASSWORD</code>, <code>UAADB_PASSWORD</code>, and <code>DIEGODB_PASSWORD</code>with secure passwords of your choosing.
    </td>
  </tr>
  <tr>
    <td><pre><code>
  hm9000:
    ca_cert: HM9000_CA_CERT
    server_cert: HM9000_SERVER_CERT
    server_key: HM9000_SERVER_KEY
    agent_cert: HM9000_AGENT_CERT
    agent_key: HM9000_AGENT_KEY
    </code></pre></td>
    <td>
      Generate SSL certificates for HM9000 and replace these values. You can use the <code>scripts/generate-hm9000-certs</code> script in the <code>cf-release</code> repository to generate self-signed certificates.
    </td>
  </tr>
  <tr>
    <td><pre><code>
  login:
    saml:
      serviceProviderKey: SAML_KEY
      serviceProviderKeyPassword: ''
      serviceProviderCertificate: SAML_CERT
    </code></pre></td>
    <td>
      Generate SSL certificates for SAML and replace these values. You can use the <code>scripts/generate-certs</code> script in the <code>cf-release</code> repository to generate self-signed certificates.
    </td>
  </tr>
  <tr>
    <td><pre><code>
jobs:
  - name: ha_proxy_z1
    networks:
      - name: cf1
        default:
        - dns
        - gateway
    properties:
      ha_proxy:
        ssl_pem: |
          -----BEGIN RSA PRIVATE KEY-----
          RSA_PRIVATE_KEY
          -----END RSA PRIVATE KEY-----
          -----BEGIN CERTIFICATE-----
          SSL_CERTIFICATE_SIGNED_BY_PRIVATE_KEY
          -----END CERTIFICATE-----
    </code></pre></td>
    <td>Replace <code>RSA_PRIVATE_KEY</code> and <code>SSL_CERTIFICATE_SIGNED_BY_PRIVATE_KEY</code> with the PEM-encoded private key and certificate associated with the system domain and apps domains that you configured to terminate at the floating IP address associated with the <code>ha_proxy</code> job. For self-signed certificates, you can run <code>openssl genrsa -out haproxy_ssl.key 2048</code> to generate a key, and run <code>openssl req -new -x509 -days 365 -key haproxy_ssl.key -out haproxy_ssl.cert</code> to generate the certificate.
    </td>
  </tr>
</table>

<%= partial '../common/additional_config' %>

##<a id='generate'></a>Step 4: Generate Your Manifest
1. Download Azure infrastructure stub `cf-infrastructure-azure.yml` for Cloud Foundry from this [link](https://raw.githubusercontent.com/cloudfoundry-incubator/bosh-azure-cpi-release/master/docs/stubs/cf/cf-infrastructure-azure.yml). You can also set IaaS configuration by changing this file, for example changing <code>instance_type</code>.
1. Run the following command from the `cf-release` directory to create a deployment manifest named `cf-deployment.yml`:
    <pre class="terminal">
    $ spiff merge \
      "${WORK\_DIR}/cf-release/templates/generic-manifest-mask.yml" \
      "${WORK\_DIR}/cf-release/templates/cf.yml" \
      "${WORK\_DIR}/cf-infrastructure-azure.yml" \
      "${WORK\_DIR}/cf-stub.yml" \
      \> "${WORK\_DIR}/cf-deployment.yml"
    </pre>

1. Use the `bosh deployment` command to set your deployment to the generated manifest:

    <pre class="terminal">
    $ bosh deployment ${WORK_DIR}/cf-deployment.yml
    </pre>

You are now ready to deploy Cloud Foundry. See the [Deploying Cloud Foundry](./common/deploy.html) topic for instructions.
