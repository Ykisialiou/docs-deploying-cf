---
title: Deploying Cloud Foundry
owner: Release Integration
---

<strong><%= modified_date %></strong>

This topic describes how to deploy Cloud Foundry
using `cf-deployment`.
Before performing this procedure,
ensure you have prepared your environment
and deployed a BOSH Director.
For more information,
see the [Prepare Your Environment](index.html#prepare) section
of the <em>Deploying Cloud Foundry with cf-deployment</em> topic.

## <a id='clone'></a> Step 1: Clone cf-deployment
Clone the `cf-deployment` repo:
	<pre class="terminal">$ git clone http<span>s:</span>//github.com/cloudfoundry/cf-deployment.git</pre>

This repo contains the canonical manifest for deploying Cloud Foundry, along with various ops files that specify operations to perform on the Cloud Foundry deployment manifest.

## <a id='ops-files'></a>Step 2: Select Your Ops Files

Every IaaS except Google Cloud Platform (GCP) requires using IaaS-specific ops files to deploy Cloud Foundry. Ops files can also add additional functionality to your deployment.

All ops files are located in the `operations` directory of the `cf-deployment` repo.

### <a id='iaas-files'></a> Identify Required Ops Files

Consult the following table to identify the ops files required by your IaaS. If you are deploying on GCP, you do not have any required ops files.

<table>
<tr>
<th>Name</th>
<th>Purpose</th>
<th>Status</th>
</tr>
<tr>
<td><code>aws.yml</code></td>
<td>This ops file customizes the VM extensions for load balancers on Amazon Web Services (AWS).</td>
<td>Required if deploying on AWS</td>
</tr>
<tr>
<td><code>change-logging-port-for-aws-elb.yml</code></td>
<td>This ops file changes the Loggregator port to 4443.</td>
<td>Required if deploying on AWS</td>
</tr>
</table>

###<a id='optional-ops-files'></a> Identify Optional Ops Files

Consult the following table to identify optional ops files.

Some of these ops files require providing variables at deploy time. For more information about how to determine variables, see the [Step 3: Determine Variables](#determine-vars) section below.

<table>
<tr>
<th>Name</th>
<th>Purpose</th>
<th>Notes</th>
</tr>
<tr>
<td><code>disable-router-tls-termination.yml</code></td>
<td>This ops file eliminates keys related to performing TLS/SSL termination within the Gorouter job. This also eliminates the need to specify <code>((router_ssl.certificate))</code> and <code>((router_ssl.private_key))</code> as variables.</td>
<td>Recommended for deployments where TLS/SSL termination is performed prior to the Gorouter, such as on AWS, where termination is commonly done at the ELB</td>
</tr>
<tr>
<td><code>configure-default-router-group.yml</code></td>
<td>This ops file allows the operator to configure reservable ports for the default TCP router group by passing the variable <code>default_router_group_reservable_ports</code>.</td>
<td></td>
</tr>
<tr>
<td><code>enable-privileged-container-support.yml</code></td>
<td>This ops file allows the operator to configure reservable ports for the default TCP router group by passing the variable <code>default_router_group_reservable_ports</code>.</td>
<td>Required if deploying on GCP</td>
</tr>
<tr>
<td><code>scale-to-one-az.yml</code></td>
<td>This ops file scales <code>cf-deployment</code> down to a single instance per instance group, placing them all into a single availability zone. This effectively halves the deployment's footprint.</td>
<td>This ops file should be applied before other ops files.</td>
</tr>
<tr>
<td><code>test/add-datadog-firehose-nozzle-aws.yml</code></td>
<td>This ops file deploys a <a href="../../loggregator/architecture.html#firehose">Firehose</a> nozzle that collects system metrics and posts them to <a href="https://www.datadoghq.com/">Datadog</a>.</td>
<td>This ops file only works with AWS.</td>
</tr>
<tr>
<td><code>tcp-routing-gcp.yml</code></a></td>
<td>This ops file adds TCP routers for GCP.</td>
<td></td>
</tr>
<tr>
<td><code>use-blobstore-cdn.yml</code></a></td>
<td>This ops file adds support for accessing the <code>droplets</code> and <code>resource_pool</code> blobstore resources through signed URLs over a CDN. This ops file assumes that you are using the same keypair for both buckets</td>
<td>This ops file introduces the following new variables:
<pre><code>cdn_key_pair_id
cdn_private_key
resource_pool_cdn_uri
droplets_cdn_uri
</code></pre>
</td>
</tr>
<tr>
<td><code>use-external-dbs.yml</code></td>
<td>This ops file removes the MySQL instance group, the cf-mysql release, and all cf-mysql variables, for deployments that use an external data store. <strong>This does not migrate data, and will delete existing database instance groups.</strong></td>
<td>This ops file must be applied before any other ops files that removes jobs that use a database, such as the ops file to remove the routing API. It also introduces the following new variables for database connection details that need to be provided at deploy time. All the variables are strings except <code>db_port</code>, which is an integer:
<pre><code>db_scheme
db_port
cc_db_name
cc_db_address
cc_db_username
cc_db_password
uaa_db_name
uaa_db_address
uaa_db_username
uaa_db_password
bbs_db_name
bbs_db_address
bbs_db_username
bbs_db_password
routing_api_db_name
routing_api_db_address
routing_api_db_username
routing_api_db_password
</code></pre>
</td>
</tr>
<tr>
<tr>
<td><code>use-postgres.yml</code></td>
<td>This ops file replaces the MySQL instance group with a Postgres instance group. <strong>This will lead to total data loss if applied to an existing deployment with MySQL or removed from an existing deployment with Postgres.</strong></td>
<td></td>
</tr>
<tr>
<td><code>use-s3-blobstore.yml</code></td>
<td>This ops file replaces the local WebDAV blobstore with an external S3 blobstore.</td>
<td>This ops file introduces new variables for AWS credentials and bucket names, which need to be provided at deploy time. The new variables are all strings:
<pre><code>aws_region
blobstore_access_key_id
blobstore_secret_access_key
app_package_directory_key
buildpack_directory_key
droplet_directory_key
resource_directory_key
</code></pre>
</td>
</tr>
<tr>
<td><code>windows-cell.yml</code></td>
<td>This ops file deploys a Windows Diego cell, and adds releases necessary for the Windows runtime.</td>
<td>This ops file requires you to upload a Windows stemcell</td>
</tr>
</table>

## <a id='determine-vars'></a>Step 3: Determine Variables

`cf-deployment` requires additional information to provide environment-specific or sensitive configuration.

The BOSH CLI stores this information in a variables store file, which is provided by the operator with the `--vars-store` flag when [deploying Cloud Foundry](#deploy). This flag takes the name of a YAML file that the BOSH CLI will read and write to. If the file does not exist, the BOSH CLI will create it. If necessary credential values are not present, the BOSH CLI will generate new values based on the type information stored in `cf-deployment.yml.`

There are certain variables that BOSH cannot generate. By default, this is only the system domain. But depending on the ops files you have selected, you may need to provide  variables in addition to the system domain.

Perform the following steps to determine your required variables and prepare them for the deploy:

1. Review the information in the [Step 2: Select Your Ops Files](#ops-files) section and create a list of the variables required by the ops files you have selected.
1. Determine the values for each of the variables. For example, the `aws_region` variable required by the `use-s3-blobstore.yml` ops file may have the value of `us-west-2`.
1. Choose one of the following methods for providing the variables when you [deploy Cloud Foundry](#deploy) below:
	* Provide the variables in a YAML file specified with the `--vars-file` flag during the deploy. This is the recommended method for configuring external persistence services.
	* Provide the variables by passing individual `-v` arguments for each variable. The syntax is `-v VAR-NAME=VAR-VALUE`.
		<p class="note"><strong>Note</strong>: Variables passed with either <code>-v</code> or <code>--vars-file</code> will override those already in the var store, but will not be stored there.</p>
	* Insert the variables directly in the variables store file alongside BOSH-managed variables.

## <a id='upload-stemcell'></a>Step 4: Upload Stemcell

1. Ensure you are logged in to your BOSH Director:
	<pre class="terminal">$ bosh -e YOUR-ENV log-in</pre>
1. Open the Cloud Foundry deployment manifest, `cf-deployment.yml`. In the final lines of the deployment manifest, locate the top-level property `stemcells` and retrieve the values for `os` and `version`. The following example specifies an Ubuntu Trusty 3312.12 stemcell.

	```
	stemcells:
	- alias: default
	  os: ubuntu-trusty
	  version: "3421.11"
	```
1. Visit the stemcells [section](https://bosh.io/stemcells) of bosh.io.
1. Locate the Ubuntu Trusty stemcell that corresponds to your IaaS and to the version specified above, and copy the URL to the stemcell.
1. Upload the stemcell:
	<pre class="terminal">$ bosh upload-stemcell YOUR-STEMCELL-URL</pre>
	<p class="note"><strong>Note</strong>: If you applied the <code>windows-cell.yml</code> ops file to deploy a Windows Diego cell, you must also upload a Windows stemcell. Examine the <code>cf-deployment</code> manifest for the version number and locate the URL for the appropriate stemcell at <a href="https://bosh.io/stemcells">bosh.io</a>.</p>

## <a id='deploy'></a>Step 5: Deploy

1. Deploy `cf-deployment`:
	<pre class="terminal">
	$ bosh -e YOUR-ENV -d cf deploy cf-deployment/cf-deployment.yml \
	--vars-store env-repo/deployment-vars.yml \
  	-v system_domain=YOUR-SYSTEM-DOMAIN \
  	-o cf-deployment/operations/YOUR-OPS-FILE-1
  	-o cf-deployment/operations/YOUR-OPS-FILE-2
  	[...]
  	</pre>
  	Depending on your choices in the [Step 3: Determine Variables](#determine-vars) section, provide additional variables with `-v` or `--vars-file`.
  	<br><br>
        If your variables store file does not exist, BOSH will create one at the path you specify with `--vars-store`. Store your variables store file in a safe and secure place. You will need it for all subsequent deploys.
  	<br><br>
  	When prompted to review the deployment manifest, enter `y` to continue.
  	<br><br>
        The deploy may take several minutes. When the command completes, run `bosh vms` to check that the Cloud Foundry VMs are running.
